apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: "2022-02-18T12:00:43Z"
  generation: 1
  labels:
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: mongodb
    app.kubernetes.io/managed-by: kubedb.com
    app.kubernetes.io/name: mongodbs.kubedb.com
  name: mongodb
  namespace: db
  ownerReferences:
  - apiVersion: kubedb.com/v1alpha2
    blockOwnerDeletion: true
    controller: true
    kind: MongoDB
    name: mongodb
    uid: 10969c71-32c8-4d91-90da-bc2ebcb571a2 
  resourceVersion: "384782"
  uid: af9324a6-7d6e-4b75-adbd-69c78deb7fda
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: mongodb
      app.kubernetes.io/managed-by: kubedb.com
      app.kubernetes.io/name: mongodbs.kubedb.com
  serviceName: mongodb-pods
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: mongodb
        app.kubernetes.io/managed-by: kubedb.com
        app.kubernetes.io/name: mongodbs.kubedb.com
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: mongodb
                  app.kubernetes.io/managed-by: kubedb.com
                  app.kubernetes.io/name: mongodbs.kubedb.com
              namespaces:
              - db
              topologyKey: kubernetes.io/hostname
            weight: 100
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: mongodb
                  app.kubernetes.io/managed-by: kubedb.com
                  app.kubernetes.io/name: mongodbs.kubedb.com
              namespaces:
              - db
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 50
      containers:
      - args:
        - --dbpath=/data/db
        - --auth
        - --bind_ip_all
        - --port=27017
        - --ipv6
        - --tlsMode=disabled
        - --replSet=replicaset
        - --keyFile=/data/configdb/key.txt
        - --clusterAuthMode=keyFile
        command:
        - mongod
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: REPLICA_SET
          value: replicaset
        - name: AUTH
          value: "true"
        - name: SSL_MODE
          value: disabled
        - name: CLUSTER_AUTH_MODE
          value: keyFile
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: mongodb-auth
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: mongodb-auth
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        image: mongo:4.4.6
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - -c
              - /init-scripts/peer-finder -on-start=/init-scripts/replicaset.sh -service=mongodb-pods
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - "set -x; if [[ $(mongo admin --host=localhost  --username=$MONGO_INITDB_ROOT_USERNAME
              --password=$MONGO_INITDB_ROOT_PASSWORD --authenticationDatabase=admin
              --quiet --eval \"db.adminCommand('ping').ok\" ) -eq \"1\" ]]; then \n
              \         exit 0\n        fi\n        exit 1"
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: mongodb
        ports:
        - containerPort: 27017
          name: db
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - "set -x; if [[ $(mongo admin --host=localhost  --username=$MONGO_INITDB_ROOT_USERNAME
              --password=$MONGO_INITDB_ROOT_PASSWORD --authenticationDatabase=admin
              --quiet --eval \"db.adminCommand('ping').ok\" ) -eq \"1\" ]]; then \n
              \         exit 0\n        fi\n        exit 1"
          failureThreshold: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /work-dir
          name: workdir
        - mountPath: /data/configdb
          name: config
        - mountPath: /data/db
          name: datadir
        - mountPath: /init-scripts
          name: init-scripts
      - args:
        - run
        - --db-name=mongodb
        - --db-kind=MongoDB
        - --logtostderr=true
        - --alsologtostderr=false
        - --v=3
        - --stderrthreshold=2
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: mongodb-auth
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: mongodb-auth
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        image: kubedb/replication-mode-detector:v0.11.0
        imagePullPolicy: IfNotPresent
        name: replication-mode-detector
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      initContainers:
      - args:
        - -c
        - "\n\t\t\techo \"running install.sh\"\n\t\t\t/scripts/install.sh"
        command:
        - /bin/sh
        env:
        - name: SSL_MODE
          value: disabled
        image: kubedb/mongodb-init:4.2-v3
        imagePullPolicy: IfNotPresent
        name: copy-config
        resources:
          limits:
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 100Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /data/configdb
          name: config
        - mountPath: /init-scripts
          name: init-scripts
        - mountPath: /var/run/mongodb/tls
          name: certdir
        - mountPath: /keydir-readonly
          name: keydir
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: mongodb
      serviceAccountName: mongodb
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: workdir
      - emptyDir: {}
        name: init-scripts
      - emptyDir: {}
        name: certdir
      - name: keydir
        secret:
          defaultMode: 256
          secretName: mongodb-key
      - emptyDir: {}
        name: config
  updateStrategy:
    type: OnDelete
  volumeClaimTemplates:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      annotations:
        volume.beta.kubernetes.io/storage-class: standard
      creationTimestamp: null
      name: datadir
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
      storageClassName: standard
      volumeMode: Filesystem
    status:
      phase: Pending
status:
  collisionCount: 0
  currentReplicas: 3
  currentRevision: mongodb-5c7bc6788d
  observedGeneration: 1
  readyReplicas: 3
  replicas: 3
  updateRevision: mongodb-5c7bc6788d
  updatedReplicas: 3
