containers:
  - args:
    - --dbpath=/data/db
    - --auth
    - --bind_ip_all
    - --port=27017
    - --ipv6
    - --tlsMode=disabled
    - --replSet=replicaset
    - --keyFile=/data/configdb/key.txt
    - --clusterAuthMode=keyFile
    command:
    - mongod
    env:
    - name: POD_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: REPLICA_SET
      value: replicaset
    - name: AUTH
      value: "true"
    - name: SSL_MODE
      value: disabled
    - name: CLUSTER_AUTH_MODE
      value: keyFile
    - name: MONGO_INITDB_ROOT_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: mongodb-auth
    - name: MONGO_INITDB_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: mongodb-auth
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    image: mongo:4.4.6
    imagePullPolicy: IfNotPresent
    lifecycle:
      postStart:
        exec:
          command:
          - /bin/bash
          - -c
          - /init-scripts/peer-finder -on-start=/init-scripts/replicaset.sh -service=mongodb-pods
    livenessProbe:
      exec:
        command:
        - bash
        - -c
        - "set -x; if [[ $(mongo admin --host=localhost  --username=$MONGO_INITDB_ROOT_USERNAME
          --password=$MONGO_INITDB_ROOT_PASSWORD --authenticationDatabase=admin
          --quiet --eval \"db.adminCommand('ping').ok\" ) -eq \"1\" ]]; then \n
          \         exit 0\n        fi\n        exit 1"
      failureThreshold: 3
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: mongodb
    ports:
    - containerPort: 27017
      name: db
      protocol: TCP
    readinessProbe:
      exec:
        command:
        - bash
        - -c
        - "set -x; if [[ $(mongo admin --host=localhost  --username=$MONGO_INITDB_ROOT_USERNAME
          --password=$MONGO_INITDB_ROOT_PASSWORD --authenticationDatabase=admin
          --quiet --eval \"db.adminCommand('ping').ok\" ) -eq \"1\" ]]; then \n
          \         exit 0\n        fi\n        exit 1"
      failureThreshold: 3
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources:
      limits:
        memory: 100Mi
      requests:
        cpu: 100m
        memory: 100Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /work-dir
      name: workdir
    - mountPath: /data/configdb
      name: config
    - mountPath: /data/db
      name: datadir
    - mountPath: /init-scripts
      name: init-scripts





  - args:
    - run
    - --db-name=mongodb
    - --db-kind=MongoDB
    - --logtostderr=true
    - --alsologtostderr=false
    - --v=3
    - --stderrthreshold=2
    env:
    - name: MONGO_INITDB_ROOT_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: mongodb-auth
    - name: MONGO_INITDB_ROOT_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: mongodb-auth
    - name: POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    image: kubedb/replication-mode-detector:v0.11.0
    imagePullPolicy: IfNotPresent
    name: replication-mode-detector
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File







  initContainers:
  - args:
    - -c
    - "\n\t\t\techo \"running install.sh\"\n\t\t\t/scripts/install.sh"
    command:
    - /bin/sh
    env:
    - name: SSL_MODE
      value: disabled
    image: kubedb/mongodb-init:4.2-v3
    imagePullPolicy: IfNotPresent
    name: copy-config
    resources:
      limits:
        memory: 100Mi
      requests:
        cpu: 100m
        memory: 100Mi
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /data/configdb
      name: config
    - mountPath: /init-scripts
      name: init-scripts
    - mountPath: /var/run/mongodb/tls
      name: certdir
    - mountPath: /keydir-readonly
      name: keydir
  
  
  
  
  
  
  
  volumes:
  - emptyDir: {}
    name: workdir
  - emptyDir: {}
    name: init-scripts
  - emptyDir: {}
    name: certdir
  - name: keydir
    secret:
      defaultMode: 256
      secretName: mongodb-key
  - emptyDir: {}
    name: config
